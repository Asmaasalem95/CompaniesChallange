<?php


namespace Tests\Unit;


use App\Services\CompanyService;
use Tests\TestCase;


class CompanyServiceTest extends TestCase
{

    private $companyServiceMock;
    /**
     * @var array
     */
    private $companiesData;

    public function setUp(): void
    {

        $this->companiesData = [

            [
                "Company Name" => "iShares MSCI All Country Asia Information Technology Index Fund",
                "Financial Status" => "N", "Market Category" => "G",
                "Round Lot Size" => 100.0,
                "Security Name" => "iShares MSCI All Country Asia Information Technology Index Fund",
                "Symbol" => "AAIT",
                "Test Issue" => "N"
            ],
            [
                "Company Name" => "American Airlines Group, Inc.",
                "Financial Status" => "N", "Market Category" => "Q",
                "Round Lot Size" => 100.0,
                "Security Name" => "American Airlines Group, Inc. - Common Stock",
                "Symbol" => "AAL",
                "Test Issue" => "N"]

        ];

        $this->companyServiceMock = $this->getMockBuilder(CompanyService::class)->onlyMethods(['getDataCompaniesDataFromEP','getFinanceDataFromEP'])->getMock();

        $this->companyServiceMock->expects($this->any())
            ->method('getDataCompaniesDataFromEP')
            ->willReturn($this->companiesData);

        parent::setUp(); // TODO: Change the autogenerated stub
    }


    function test_can_get_company_symbols_list()
    {
        $expectedList = ["AAIT","AAL"];

        $list = $this->companyServiceMock->getCompaniesSymbolList();
        $this->assertEquals($expectedList,$list);

    }
    function test_can_get_company_name_with_symbol()
    {
       $companyName =  $this->companyServiceMock->getCompanyNameBySymbol($this->companiesData[0]['Symbol']);
       $this->assertEquals($this->companiesData[0]['Company Name'],$companyName);

    }

    function test_can_filter_companies_by_date_range()
    {
        $filters = [
            "start_date" => "2023-05-01T18:08:00.000Z",
            "end_date" => "2023-05-06T18:08:00.000Z",
            "symbol" => "AAL",
        ];
        $data = [
            "prices" => [
                ["date" => 1684860739,
                "open" => 2.1800999641418,
                "high" => 2.2000000476837,
                "low" => 2.1199998855591,
                "close" => 2.1500000953674,
                "volume" => 5871,
                "adjclose" => 2.1500000953674
                ],
                [
                    "date" => 1683120600,
                    "open" => 2.1800000667572,
                    "high" => 2.2799999713898,
                    "low" => 2.1800000667572,
                    "close" => 2.1900000572205,
                    "volume" => 2800,
                    "adjclose" => 2.1900000572205
                ]
            ]];

        $this->companyServiceMock->expects($this->any())
            ->method('getFinanceDataFromEP')
            ->with($filters['symbol'])
            ->willReturn($data);
        $filteredData = $this->companyServiceMock->getFilteredCompanies($filters);
        $this->assertEquals(1,count($filteredData));

    }
}
